---
title: "Data_wrangling"
format: pdf
editor: visual
---

## Load required packages

```{r}
library(tidyverse)
library(httr2)
library(readxl)
library(janitor)
library(jsonlite)
library(gridExtra)
```

## Obtain the population data

```{r}
getwd()
setwd('../')
census_key <- readRDS('code/census_key.R')

# load the US population dataset
population <- read_excel("raw_data/NST-EST2023-POP.xlsx")

```

## Data wrangling: population data

```{r}
# wrangle the original populaiton data
colnames(population) <- NULL
population <- population[-c(1:2),]
colnames(population) <- make.names(colnames(population), unique = TRUE)
population <- as.data.frame(population)
population[1,1] <- 'state'
population <- population[-c(60:65),-2]
population <- population[-58,]
population <- row_to_names(population, row_number = 1)
population$state <- sub("^\\.", "", population$state)
rownames(population) <- NULL
population <- as_tibble(population)

# extract the state population data
state_pop <- population[6:nrow(population),]

# wrangle the state population data to make it tidy
state_pop <- state_pop |> 
  rename(state_name = state) |> 
  mutate(across(-state_name, as.numeric)) |> 
  pivot_longer(-state_name, names_to = "year", values_to = "population") |> 
  mutate(state = state.abb[match(state_name, state.name)]) |>
  mutate(state = case_when(
    state_name == "District of Columbia" ~ "DC",
    state_name == "Puerto Rico" ~ "PR",
    .default = state)) |> 
  relocate(state, .after = state_name) |> 
  mutate(year = as.numeric(year))
```

```{r}
# import the region data and combine with state population data

url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url, simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x){
  data.frame(state_name = x$states, region = x$region, region_name = x$region_name)}) |>
  mutate(region = factor(as.numeric(region))) |>
  mutate(region_name = ifelse(nchar(region_name) > 50, "NY,NJ,PR,USVI", region_name))

state_pop <- left_join(state_pop, regions, by = "state_name")
```

## Obtain COVID-19 data from CDC

```{r}
# obtain covid-19 data from CDC

get_cdc_data <- function(url, limit = 1000000000){
  ret <- request(url) |> 
    req_url_query('$limit' = limit) |> 
    req_perform() |> 
    resp_body_json(simplifyVector = TRUE)
  return(ret)
}

cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
```

## Data wrangling: COVID-19 data

```{r}
# wrangle cases data

cases <- cases_raw |> 
  mutate(cases = parse_number(new_cases),
         date = as_date(ymd_hms(end_date))) |> 
  filter(state %in% state_pop$state) |> 
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |> 
  select(state, mmwr_year, mmwr_week, cases) |> 
  arrange(state, mmwr_year, mmwr_week)
```

```{r}
# wrangle death data

deaths <- deaths_raw |> 
  filter(state %in% state_pop$state_name) |> 
  mutate(end_date = as_date(end_date),
         mmwr_year = epiyear(end_date)) |>
  rename(deaths_prov = covid_19_deaths) |> 
  mutate(mmwr_week = parse_number(mmwr_week),
         deaths = parse_number(deaths_prov)) |> 
  select(state, mmwr_week, mmwr_year, deaths)
```

```{r}
# make a datafram that includes all dates from 2020/01/05 to 2023/12/30

all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2023, 12, 30),
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |> 
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date))

dates_and_pop <- cross_join(all_dates, data.frame(state = unique(state_pop$state))) |> 
  left_join(state_pop, by = c("state", "mmwr_year" = "year"))

# combine this dataframe with cases and deaths data
dat <- dates_and_pop |> 
  left_join(cases, by = c("state", "mmwr_week", "mmwr_year")) |> 
  left_join(deaths, by = c("state_name" = "state", "mmwr_week","mmwr_year")) |> 
  arrange(state, date)

# compute rates for cases and deaths (per 100000 people)
dat <- dat |> 
  mutate(cases_rate = cases/population*100000,
         deaths_rate = deaths/population*100000)

saveRDS(dat, file = "data/combined_data.rds")
```

## Data visualization

```{r}
# make plots to show the trends for cases and deaths from 2020 to 2023
# This plot shows morbidity and mortality rates for each region from 2020 to 2023
cov_plot_1 <- dat |> mutate(cases = cases/population*100000,
                            deaths = deaths/population*100000) |> 
  select(date, cases, deaths, state, region) |> 
  pivot_longer(c(cases, deaths), values_to = "rate", names_to = "outcome") |> 
  ggplot(aes(date, rate, color = region, group = state)) +
  geom_line() +
  facet_wrap(~outcome, nrow = 2, scales = "free_y") +
  scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(cov_plot_1)
  
```

According to this graph, we can find several COVID-19 waves. The first wave is April 4, 2020 - June 20, 2020, the second wave is September 12, 2020 - March 20, 2021, and the third wave is July 03, 2021 - April 23, 2022.

## Mortality rate analysis

```{r}
# For wave 1, calculate the mortality rate for each state and make a plot to visualize
mortality_plot_1 <- dat |> 
  filter(date >= make_date(2020, 4, 4) & date <= make_date(2020, 6, 20)) |> 
  group_by(state) |>
  summarize(mortality_rate = mean(deaths, na.rm = TRUE)*n() / population[1]*100000) |> 
  ungroup() |> 
  ggplot(aes(x = reorder(state, mortality_rate), y = mortality_rate, fill = state)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  labs(
    title = "Mortality Rate by State during wave 1",
    x = "State",
    y = "Mortality Rate (per 100,000)"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()

```

```{r}
# For wave 2, calculate the mortality rate for each state and make a plot to visualize
mortality_plot_2 <- dat |> 
  filter(date >= make_date(2020, 9, 12) & date <= make_date(2021, 3, 20)) |> 
  group_by(state) |>
  summarize(mortality_rate = mean(deaths, na.rm = TRUE)*n() / population[1]*100000) |> 
  ungroup() |> 
  ggplot(aes(x = reorder(state, mortality_rate), y = mortality_rate, fill = state)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  labs(
    title = "Mortality Rate by State during wave 2",
    x = "State",
    y = "Mortality Rate (per 100,000)"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()
```

```{r}
# For wave 3, calculate the mortality rate for each state and make a plot to visualize
mortality_plot_3 <- dat |> 
  filter(date >= make_date(2021, 7, 3) & date <= make_date(2022, 4, 23)) |> 
  group_by(state) |>
  summarize(mortality_rate = mean(deaths, na.rm = TRUE)*n() / population[1]*100000) |> 
  ungroup() |> 
  ggplot(aes(x = reorder(state, mortality_rate), y = mortality_rate, fill = state)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  labs(
    title = "Mortality Rate by State during wave 3",
    x = "State",
    y = "Mortality Rate (per 100,000)"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()
```

## Virulence analysis

```{r}
# Analyze the trend for mortality accross these waves
wave1 <- dat |>
  filter(date >= make_date(2020, 4, 4) & date <= make_date(2020, 6, 20)) |> 
  group_by(region) |>
  summarize(total_death = sum(deaths, na.rm = TRUE),
            total_case = sum(cases, na.rm = TRUE)) |>
  ungroup() |> 
  mutate(mor_ratio_1 = total_death/total_case) |> 
  select(region, mor_ratio_1)

wave2 <- dat |>
  filter(date >= make_date(2020, 9, 12) & date <= make_date(2021, 3, 20)) |> 
  group_by(region) |>
  summarize(total_death = sum(deaths, na.rm = TRUE),
            total_case = sum(cases, na.rm = TRUE)) |>
  ungroup() |> 
  mutate(mor_ratio_2 = total_death/total_case) |> 
  select(region, mor_ratio_2)

wave3 <- dat |>
  filter(date >= make_date(2021, 7, 3) & date <= make_date(2022, 4, 23))|>
  group_by(region) |>
  summarize(total_death = sum(deaths, na.rm = TRUE),
            total_case = sum(cases, na.rm = TRUE)) |>
  ungroup() |> 
  mutate(mor_ratio_3 = total_death/total_case) |> 
  select(region, mor_ratio_3)

combined_rates <- wave1 |>
  left_join(wave2, by = "region") |>
  left_join(wave3, by = "region") |> 
  rename(wave1 = mor_ratio_1,
         wave2 = mor_ratio_2,
         wave3 = mor_ratio_3) |> 
  mutate(region = paste0("region ", region))

combined_rates <- combined_rates |>
  pivot_longer(cols = starts_with("wave"), names_to = "wave", values_to = "mortality_to_case_ratio")

mortality_comparison <- ggplot(combined_rates, aes(x = wave, 
                                                   y = mortality_to_case_ratio, fill = wave)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~region, scales = "free_y") +
  labs(
    title = "Mortality-to-Morbidity Ratio by Region Across Waves",
    x = "Wave",
    y = "Mortality-to-Morbidity Ratio"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  )

print(mortality_comparison)
```
